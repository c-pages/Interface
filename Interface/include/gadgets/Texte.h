#ifndef TEXTE_H
#define TEXTE_H


/////////////////////////////////////////////////
// Headers
/////////////////////////////////////////////////

namespace gui {
/////////////////////////////////////////////////
/// \brief
///
///
///
/////////////////////////////////////////////////
class Texte
{
public:

    /////////////////////////////////////////////////
    /// \brief Constructeur par défaut
    ///
    /////////////////////////////////////////////////
    Texte();

    /////////////////////////////////////////////////
    /// \brief Destructeur
    ///
    /////////////////////////////////////////////////
    ~Texte();

/*
    /////////////////////////////////////////////////
    /// \brief Accesseur de la taille du texte.
    ///
    /// \return la taille
    ///
    /////////////////////////////////////////////////
    sf::Vector2f
    getSize ( ) const;


    /////////////////////////////////////////////////
    /// \brief Accesseur de la boundingBox en local
    ///
    /// \return La boundingBox
    ///
    /////////////////////////////////////////////////
    sf::FloatRect
    getLocalBounds ( ) const;

    /////////////////////////////////////////////////
    /// \brief Accesseur de la boundingBox en global
    ///
    /// \return La boundingBox
    ///
    /////////////////////////////////////////////////
    sf::FloatRect
    getGlobalBounds ( ) const;

    /////////////////////////////////////////////////
    /// \brief Definir le texte du Label.
    ///
    /// \param texte     Le nouveau texte
    /// \return Rien
    ///
    /////////////////////////////////////////////////
    void
    setTexte ( std::string texte ) {  m_texte->setString(texte);   } ;

    /////////////////////////////////////////////////
    /// \brief Accesseur du texte du Label.
    ///
    /// \return le texte du Label.
    ///
    /////////////////////////////////////////////////
    std::string
    getTexte ( ) const {  return m_texte->getString();   } ;



    /////////////////////////////////////////////////
    /// \brief Actualise le style du label
    ///
    /// \return Rien
    ///
    /////////////////////////////////////////////////
    virtual void
    majGeom( );

    /////////////////////////////////////////////////
    /// \brief La gestion des évènements utilisateurs.
    ///
    /// Gère les entrées claviers, souris, fenetre ...
    ///
    /// \param event evenement SFML
    /// \return Rien
    ///
    /////////////////////////////////////////////////
    void
    traiter_evenements ( const sf::Event& event );

    /////////////////////////////////////////////////
    /// \brief Actualiser les éléments.
    ///
    /// Actualiser les différents éléments du ou des écrans actifs.
    ///
    /// \param deltaT          Un \e float qui indique le delta du temps écoulé depuis la dernière actualisation.
    /// \return Rien
    ///
    /////////////////////////////////////////////////
    void
    actualiser ( float deltaT );

    /////////////////////////////////////////////////
    /// \brief Rendre les différents éléments du ou des écrans actifs.
    ///
    /////////////////////////////////////////////////
    virtual void
    draw( sf::RenderTarget& target, sf::RenderStates states ) const;

private:

    /////////////////////////////////////////////////
    // Les Membres
    /////////////////////////////////////////////////

    sf::Text *              m_texte;        ///< Le text SFML.
*/
};

////////////////////////////////////////////////////////////
/// \class gui::Texte
/// \ingroup  interface
///
/// exemple :
/// \code
/// \endcode
/// \see
///
////////////////////////////////////////////////////////////


};// fin namespace


#endif // TEXTE_H
